#BlueJ class context
comment0.target=Maze
comment1.params=sz
comment1.target=Maze(int)
comment1.text=\r\n\ Make\ a\ maze\ of\ the\ specified\ size\r\n
comment2.params=
comment2.target=void\ reset()
comment2.text=\r\n\ Unvisits\ all\ cells\r\n
comment3.params=
comment3.target=MazeCell\ getGoal()
comment3.text=\r\n\ Return\ the\ goal\ cell\ of\ the\ maze\r\n
comment4.params=x\ y
comment4.target=MazeCell\ getCellAt(double,\ double)
comment4.text=\r\n\ Return\ the\ cell\ at\ position\ (x,y).\r\n\ if\ (x,y)\ is\ off\ the\ maze,\ returns\ cells[0][0]\r\n
comment5.params=
comment5.target=void\ draw()
comment5.text=\r\n\ Draw\ the\ maze.\r\n
comment6.params=
comment6.target=void\ generateGraph()
comment6.text=\r\n\ Generates\ graph\ of\ paths\ starting\ from\ [0,0]\r\n\ Then\ removes\ all\ the\ visited\ markers\r\n
comment7.params=cell
comment7.target=void\ extendPathsFrom(MazeCell)
comment7.text=\r\n\ Does\ a\ random\ recursive\ depth\ first\ search\ of\ the\ maze,\r\n\ Visits\ each\ cell\ the\ first\ time\ it\ gets\ to\ a\ cell\r\n\ For\ each\ possible\ neighbouring\ cell\ that\ hasn't\ already\ been\ visited,\r\n\ \ it\ adds\ the\ cell\ to\ the\ neighbours\ of\ this\ cell\ (and\ vice\ versa)\r\n\ \ and\ extends\ the\ paths\ from\ those\ neighbours.\r\n\ It\ also\ links\ to\ approximately\ 3%\ of\ the\ visited\ neighbouring\ cells.\r\n
comment8.params=cell\ direction
comment8.target=MazeCell\ getNextCell(MazeCell,\ java.lang.String)
comment8.text=\r\n\ Return\ the\ next\ cell\ over\ in\ the\ given\ direction.\r\n\ If\ the\ next\ cell\ would\ be\ over\ the\ edge\ of\ the\ maze,\ then\ returns\ null\r\n
comment9.params=args
comment9.target=void\ main(java.lang.String[])
numComments=10
